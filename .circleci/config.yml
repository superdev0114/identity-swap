version: 2.1

defaults:
  - &on-develop
    filters:
      branches:
        only:
          - develop
  - &on-master
    filters:
      branches:
        only:
          - master
  - &on-release
    filters:
      branches:
        ignore: /.*/ # ignore any non-tagged commit on any branch by default
      tags:
          only: /^\d+\.\d+\.\d+$/ # only run on tags of the type x.x.x
  - &restore_cache
    restore_cache:
      name: Restore Yarn Package Cache
      keys:
        - yarn-packages-{{ checksum "yarn.lock" }}
  - &save_cache
    save_cache:
      name: Save Yarn Package Cache
      key: yarn-packages-{{ checksum "yarn.lock" }}
      paths:
        - ~/.cache/yarn

executors:
  default:
    docker:
      - image: cimg/rust:1.46.0-node
  machine:
    machine:
      image: ubuntu-1604:202007-01

commands:
  init:
    steps:
      - checkout
      - *restore_cache
      - run:
          name: Install Dependencies
          command: yarn install --immutable
      - *save_cache

  deploy:
    parameters:
      stage:
        type: string
        default: "dev"
    steps:
      - init
      - run:
          name: Build
          command: |
            yarn build
            STAGE=<< parameters.stage >> yarn deploy

jobs:
  test:
    executor: default
    steps:
      - init
      - run:
          name: Lint
          command: yarn lint
      - run:
          name: Unit test
          command: yarn test:unit

  compileSolanaPrograms:
    executor: default
    environment:
      SPL_DIRECTORY: ~/project/node_modules/solana-program-library
    steps:
      - init
      - run:
          name: Compile SPF
          command: yarn solana:build
      - persist_to_workspace:
          root: ./
          paths:
            - ./

  integration:
    executor: machine
    environment:
      SPL_DIRECTORY: ~/project/node_modules/solana-program-library
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Install Node
          command: sudo snap install --classic node
      - run:
          name: Install Yarn
          command: |
            curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
            echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
            sudo apt update
            sudo apt install yarn
      - init
      - run:
          name: Run Solana localnet
          command: |
            yarn solana:localnet:update
            yarn solana:localnet:up
      - run:
          name: Load program
          command: yarn solana:loadDefaultProgram
      - run:
          name: Integration tests
          command: yarn test:integration

  deployDev:
    executor: default
    steps:
      - deploy:
          stage: dev

  deployPreprod:
    executor: default
    steps:
      - deploy:
          stage: preprod

  deployProd:
    executor: default
    steps:
      - deploy:
          stage: prod

workflows:
  version: 2
  build:
    jobs:
      - test:
          context: Development
      - compileSolanaPrograms:
          context: Development
      - integration:
          context: Development
          requires:
            - compileSolanaPrograms
      - deployDev:
          context: Development
          <<: *on-develop
          requires:
            - test
            - integration
  preprod:
    jobs:
      - test:
          context: Development
          <<: *on-master
      - compileSolanaPrograms:
          context: Development
          <<: *on-master
      - integration:
          context: Development
          requires:
            - compileSolanaPrograms
      - deployPreprod:
          context: Development
          requires:
            - test
            - integration

  prod:
    jobs:
      - test:
          context: Development
          <<: *on-release
      - compileSolanaPrograms:
          context: Development
          <<: *on-release
      - integration:
          context: Development
          <<: *on-release
          requires:
            - compileSolanaPrograms
      - hold-before-prod-deploy:
          type: approval
          <<: *on-release
          requires:
            - test
            - integration
      - deployProd:
          context: Production
          <<: *on-release
          requires:
            - hold-before-prod-deploy
